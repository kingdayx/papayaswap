"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ethers_1 = require("ethers");
function supportChangeBalances(Assertion) {
    Assertion.addMethod('changeBalances', function (wallets, balanceChanges) {
        const subject = this._obj;
        if (typeof subject !== 'function') {
            throw new Error(`Expect subject should be a callback returning the Promise
        e.g.: await expect(() => wallet.send({to: '0xb', value: 200})).to.changeBalances(['0xa', '0xb'], [-200, 200])`);
        }
        const derivedPromise = getBalanceChanges(subject, wallets)
            .then((actualChanges) => {
            const walletsAddresses = wallets.map((wallet) => wallet.address);
            this.assert(actualChanges.every((change, ind) => change.eq(ethers_1.utils.bigNumberify(balanceChanges[ind]))), `Expected ${walletsAddresses} to change balance by ${balanceChanges} wei, ` +
                `but it has changed by ${actualChanges} wei`, `Expected ${walletsAddresses} to not change balance by ${balanceChanges} wei,`, balanceChanges.map((balanceChange) => balanceChange.toString()), actualChanges.map((actualChange) => actualChange.toString()));
        });
        this.then = derivedPromise.then.bind(derivedPromise);
        this.catch = derivedPromise.catch.bind(derivedPromise);
        this.promise = derivedPromise;
        return this;
    });
}
exports.supportChangeBalances = supportChangeBalances;
async function getBalanceChanges(transactionCallback, wallets) {
    const balancesBefore = await Promise.all(wallets.map((wallet) => wallet.getBalance()));
    await transactionCallback();
    const balancesAfter = await Promise.all(wallets.map((wallet) => wallet.getBalance()));
    return balancesAfter.map((balance, ind) => balance.sub(balancesBefore[ind]));
}
