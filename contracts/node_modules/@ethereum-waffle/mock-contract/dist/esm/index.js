import { Contract, ContractFactory, utils } from 'ethers';
import DoppelgangerContract from './Doppelganger.json';
async function deploy(wallet) {
    const factory = new ContractFactory(DoppelgangerContract.abi, DoppelgangerContract.bytecode, wallet);
    return factory.deploy();
}
function stub(mockContract, encoder, func, params) {
    const callData = params ? func.encode(params) : func.sighash;
    return {
        returns: async (...args) => {
            const encoded = encoder.encode(func.outputs, args);
            await mockContract.__waffle__mockReturns(callData, encoded);
        },
        reverts: async () => mockContract.__waffle__mockReverts(callData),
        withArgs: (...args) => stub(mockContract, encoder, func, args)
    };
}
function createMock(abi, mockContractInstance) {
    const { functions } = new utils.Interface(abi);
    const encoder = new utils.AbiCoder();
    return Object.values(functions).reduce((acc, func) => ({
        ...acc,
        [func.name]: stub(mockContractInstance, encoder, func)
    }), {});
}
export async function deployMockContract(wallet, abi) {
    console.warn('deployMockContract is an experimental feature. ' +
        'Breaking changes will not result in a new major version');
    const mockContractInstance = await deploy(wallet);
    const mock = createMock(abi, mockContractInstance);
    const mockedContract = new Contract(mockContractInstance.address, abi, wallet);
    mockedContract.mock = mock;
    return mockedContract;
}
